#!/bin/bash

function notify {
    if [ -n "${use_notify}" ]; then
        if which notify-send > /dev/null ; then
            DISPLAY=:0.0 XAUTHORITY=$HOME/.Xauthority notify-send "Backup" "$1"
        else
            echo "'use_notify' config flag is set but notify-send is not installed"
        fi
    fi
}

function die {
    rm -f ${CONFIG_DIR}/lock
    notify "ERROR: $1"
    echo "ERROR: $1"
    exit 1
}


CONFIG_DIR=${HOME}/.backup
while getopts 'c:' ARG; do
    case ${ARG} in
        'c')
            [ -d ${OPTARG} ] || die "${OPTARG} is not a directory"
            CONFIG_DIR=${OPTARG}
            ;;
        '?')
            die "unknown command-line argument"
            ;;
    esac
done

# top-level config provides defaults
echo config dir ${CONFIG_DIR}
[ -r ${CONFIG_DIR}/config ] && source ${CONFIG_DIR}/config

MODULE=${!OPTIND}
if [ -n ${MODULE} ]; then
    echo module $MODULE
    CONFIG_DIR=${CONFIG_DIR}/${MODULE}
fi

[ ! -f ${CONFIG_DIR}/config ] && die "Config file not found in ${CONFIG_DIR}/config"

# module-level configs override the defaults
source ${CONFIG_DIR}/config

if [ -n ${MODULE} ]; then
    remote_path=${remote_path}/${MODULE}
fi

if [ -e ${CONFIG_DIR}/lock ]; then
    notify "ERROR: Backup already running"
    echo "ERROR: Backup already running"
    exit 1
fi

notify "Running backup"

if [ -n "${ssh_id}" ]; then
    SSH_IDENTITY="-i ${ssh_id} -o IdentitiesOnly=yes -o PreferredAuthentications=publickey"
else
    SSH_IDENTITY=""
fi

touch ${CONFIG_DIR}/lock

ssh ${SSH_IDENTITY} -T $backup_host <<EOF
    mkdir -p $remote_path &&
    cd $remote_path &&
    ln -sf ./hourly.$hourly_snapshots ./daily.0 &&
    ln -sf ./daily.$daily_snapshots ./weekly.0 &&
    ln -sf ./weekly.$weekly_snapshots ./monthly.0
EOF

[ $? == 0 ] || die "Failed creating target path"

rsync -azP \
    --delete \
    --delete-excluded \
    --exclude-from=${CONFIG_DIR}/exclude \
    --link-dest=../hourly.1 \
    -e "ssh ${SSH_IDENTITY}" \
    $backup_root \
    $backup_host:$remote_path/hourly.0;

[ $? == 0 ] || die "rsync failed"

function rotate_snapshots {
  local interval=$1
  local snapshot_var=${interval}_snapshots
  local snapshots=${!snapshot_var}
  echo "Rotate $1"

  ssh ${SSH_IDENTITY} -T $backup_host <<EOF
    cd $remote_path;
    [ -d $interval.$snapshots ] && rm -rf $interval.$snapshots;
    for i in {$snapshots..2}; do
      [ -d $interval.\$(( \$i - 1 )) ] && mv $interval.\$(( \$i - 1 )) $interval.\$i;
    done;
    if [ -h $interval.0 ]; then
      touch -h $interval.0
      cp -al \$(readlink $interval.0) $interval.1;
    else
      touch $interval.0
      cp -al $interval.0 $interval.1;
    fi;
EOF
}

function test_age() {
    local interval=$1
    local max_age=$2
    local snapshot_var=${interval}_snapshots
    local last_snapshot=${!snapshot_var}

    local mtime=$(ssh ${SSH_IDENTITY} -T $backup_host \
	"stat -c '%Y' $remote_path/$interval.0")
    [ -z "$mtime" ] && return 1
    age=$(( $(date +%s) - $mtime ))
    echo "$interval age is $age / $max_age"
    test $age -gt $max_age
}

rotate_snapshots hourly
test_age daily $(( 24*60*60 )) && rotate_snapshots daily
test_age weekly $(( 7*24*60*60 )) && rotate_snapshots weekly
test_age monthly $(( 30*24*60*60 )) && rotate_snapshots monthly

rm ${CONFIG_DIR}/lock

notify "Backup done"
